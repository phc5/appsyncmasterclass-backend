schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  getImageUploadUrl(extension: String, contentType: String): AWSURL!

  getMyTimeline(limit: Int!, nextToken: String): UnhydratedTweetsPage!

  getMyProfile: MyProfile!

  getProfile(username: String!): OtherProfile

  getTweets(userId: ID!, limit: Int!, nextToken: String): TweetsPage!

  getLikes(userId: ID!, limit: Int!, nextToken: String): UnhydratedTweetsPage!

  getFollowers(userId: ID!, limit: Int!, nextToken: String): ProfilesPage!

  getFollowing(userId: ID!, limit: Int!, nextToken: String): ProfilesPage!

  search(
    query: String!
    mode: SearchMode!
    limit: Int!
    nextToken: String
  ): SearchResultsPage!

  getHashTag(
    hashTag: String!
    mode: HashTagMode!
    limit: Int!
    nextToken: String
  ): HashTagResultsPage!
}

type Mutation {
  editMyProfile(newProfile: ProfileInput!): MyProfile!

  tweet(text: String!): Tweet!

  like(tweetId: ID!): Boolean!

  unlike(tweetId: ID!): Boolean!

  retweet(tweetId: ID!): Retweet!

  unretweet(tweetId: ID!): Boolean!

  reply(tweetId: ID!, text: String!): Reply!

  follow(userId: ID!): Boolean!

  unfollow(userId: ID!): Boolean!

  notifyRetweeted(
    id: ID!
    userId: ID!
    tweetId: ID!
    retweetedBy: ID!
    retweetId: ID!
  ): Notification! @aws_iam

  notifyLiked(id: ID!, userId: ID!, tweetId: ID!, likedBy: ID!): Notification!
    @aws_iam

  notifyMentioned(
    id: ID!
    userId: ID!
    mentionedBy: ID!
    mentionedByTweetId: ID!
  ): Notification! @aws_iam

  notifyReplied(
    id: ID!
    userId: ID!
    tweetId: ID!
    replyTweetId: ID!
    repliedBy: ID!
  ): Notification! @aws_iam
}

type Subscription {
  onNotified(userId: ID!, type: NotificationType): Notification
    @aws_subscribe(
      mutations: [
        "notifyRetweeted"
        "notifyLiked"
        "notifyMentioned"
        "notifyReplied"
      ]
    )
}

enum SearchMode {
  Top
  Latest
  People
  Photos
  Videos
}

enum HashTagMode {
  Top
  Latest
  People
  Photos
  Videos
}

interface IProfile {
  id: ID!
  name: String!
  username: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: AWSURL
  website: AWSURL
  birthdate: AWSDate
  createdAt: AWSDateTime!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCount: Int!
  tweets: TweetsPage!
}

type MyProfile implements IProfile {
  id: ID!
  name: String!
  username: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: AWSURL
  website: AWSURL
  birthdate: AWSDate
  createdAt: AWSDateTime!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCount: Int!
  tweets: TweetsPage!
}

type OtherProfile implements IProfile {
  id: ID!
  name: String!
  username: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: AWSURL
  website: AWSURL
  birthdate: AWSDate
  createdAt: AWSDateTime!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCount: Int!
  tweets: TweetsPage!
  following: Boolean!
  followedBy: Boolean!
}

interface ITweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime!
}

type TweetsPage {
  tweets: [ITweet!]
  nextToken: String
}

type UnhydratedTweetsPage {
  tweets: [ITweet!]
  nextToken: String
}

type Tweet implements ITweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime!
  text: String!
  repliesCount: Int!
  likesCount: Int!
  retweetsCount: Int!
  liked: Boolean!
  retweeted: Boolean!
}

type Reply implements ITweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime!
  text: String!
  repliesCount: Int!
  likesCount: Int!
  retweetsCount: Int!
  liked: Boolean!
  retweeted: Boolean!
  inReplyToTweet: ITweet!
  inReplyToUser: [IProfile]!
}

type Retweet implements ITweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime!
  retweetOf: ITweet!
}

type ProfilesPage {
  profiles: [IProfile!]
  nextToken: String
}

input ProfileInput {
  name: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: AWSURL
  website: AWSURL
  birthdate: AWSDate
}

union SearchResult = MyProfile | OtherProfile | Tweet | Reply

type SearchResultsPage {
  results: [SearchResult!]
  nextToken: String
}

union HashTagResult = MyProfile | OtherProfile | Tweet | Reply

type HashTagResultsPage {
  results: [HashTagResult!]
  nextToken: String
}

type Retweeted implements iNotification @aws_iam @aws_cognito_user_pools {
  id: ID!
  type: NotificationType!
  userId: ID!
  tweetId: ID!
  retweetedBy: ID!
  retweetId: ID!
  createdAt: AWSDateTime!
}

type Liked implements iNotification @aws_iam @aws_cognito_user_pools {
  id: ID!
  type: NotificationType!
  userId: ID!
  tweetId: ID!
  likedBy: ID!
  createdAt: AWSDateTime!
}

type Mentioned implements iNotification @aws_iam @aws_cognito_user_pools {
  id: ID!
  type: NotificationType!
  userId: ID!
  mentionedBy: ID!
  mentionedByTweetId: ID!
  createdAt: AWSDateTime!
}

type Replied implements iNotification @aws_iam @aws_cognito_user_pools {
  id: ID!
  type: NotificationType!
  userId: ID!
  tweetId: ID!
  replyTweetId: ID!
  repliedBy: ID!
  createdAt: AWSDateTime!
}

union Notification @aws_iam @aws_cognito_user_pools =
    Retweeted
  | Liked
  | Mentioned
  | Replied

interface iNotification @aws_iam @aws_cognito_user_pools {
  id: ID!
  type: NotificationType!
  userId: ID!
  createdAt: AWSDateTime!
}

enum NotificationType {
  Retweeted
  Liked
  Mentioned
  Replied
}
