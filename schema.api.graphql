schema {
  query: Query
  mutation: Mutation
}

type Query {
  getImageUploadUrl(extension: String, contentType: String): AWSURL!

  getMyTimeline(limit: Int!, nextToken: String): UnhydratedTweetsPage!

  getMyProfile: MyProfile!

  getProfile(username: String!): OtherProfile

  getTweets(userId: ID!, limit: Int!, nextToken: String): TweetsPage!

  getLikes(userId: ID!, limit: Int!, nextToken: String): UnhydratedTweetsPage!

  getFollowers(userId: ID!, limit: Int!, nextToken: String): ProfilesPage!

  getFollowing(userId: ID!, limit: Int!, nextToken: String): ProfilesPage!
}

type Mutation {
  editMyProfile(newProfile: ProfileInput!): MyProfile!

  tweet(text: String!): Tweet!

  like(tweetId: ID!): Boolean!

  unlike(tweetId: ID!): Boolean!

  retweet(tweetId: ID!): Retweet!

  unretweet(tweetId: ID!): Boolean!

  reply(tweetId: ID!, text: String!): Reply!

  follow(userId: ID!): Boolean!

  unfollow(userID: ID!): Boolean!
}

interface IProfile {
  id: ID!
  name: String!
  username: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: AWSURL
  website: AWSURL
  birthdate: AWSDate
  createdAt: AWSDateTime!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCount: Int!
  tweets: TweetsPage!
}

type MyProfile implements IProfile {
  id: ID!
  name: String!
  username: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: AWSURL
  website: AWSURL
  birthdate: AWSDate
  createdAt: AWSDateTime!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCount: Int!
  tweets: TweetsPage!
}

type OtherProfile implements IProfile {
  id: ID!
  name: String!
  username: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: AWSURL
  website: AWSURL
  birthdate: AWSDate
  createdAt: AWSDateTime!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCount: Int!
  tweets: TweetsPage!
  following: Boolean!
  followedBy: Boolean!
}

interface ITweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime
}

type TweetsPage {
  tweets: [ITweet!]
  nextToken: String
}

type UnhydratedTweetsPage {
  tweets: [ITweet!]
  nextToken: String
}

type Tweet implements ITweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime
  text: String!
  repliesCount: Int!
  likesCount: Int!
  retweetsCount: Int!
  liked: Boolean!
  retweeted: Boolean!
}

type Reply implements ITweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime
  text: String!
  repliesCount: Int!
  likesCount: Int!
  retweetsCount: Int!
  liked: Boolean!
  retweeted: Boolean!
  inReplyToTweet: ITweet!
  inReplyToUser: [IProfile]!
}

type Retweet implements ITweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime
  retweetOf: ITweet!
}

type ProfilesPage {
  profiles: [IProfile!]
  nextToken: String
}

input ProfileInput {
  name: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: AWSURL
  website: AWSURL
  birthdate: AWSDate
}
